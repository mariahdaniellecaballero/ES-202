{
  "hash": "97713457c08d713dee41c1f85d8e2c89",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[Assess] Rural Electrification Case Study\"\nsubtitle: \"üìç Edgecombe County, CA\"\ndate: \"September 26, 2025\"\nformat: \n  revealjs:\n    theme:\n      - default\n    css: /Users/mc152/Documents/GitHub/ES-202/custom.scss\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    center: true\nexecute:\n  freeze: auto\n---\n\n# Class Overview \n- Centering activity\n- Setting the stage\n- Paired coding\n- Group Debrief\n\n# Centering Activity\n\n# Setting the Stage\n- This week's focus is on coding style and data tidying\n- Using data from the 1930s Census and digitized Rural Electrification Surveys provided by Dr. Conor Harrison\n\n## Zoom with Dr. Harrison\n\n\n## Learning Outcomes\n- Understand coding style best practices\n- Continued data tidying (lengthening and widening data)\n- Summarize patterns from census and survey data in the 1930s\n- Connect findings to theoretical understandings of restorative justice\n\n# Let's get Started\n- Find your pair\n- Open Posit\n\n## Load Packages\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(gt)\n```\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## Coding Style Best Practices\n\n## Names\n\n::: {.cell}\n\n```{.r .cell-code}\n# strive for\ncounty_vars_1930 <- read_csv(\"data/county_vars_1930.csv\")\nstate_vars_1930 <- read_csv(\"data/state_vars_1930.csv\")\n\n# avoid\n#COUNTYVARS1930\n\n#rm(COUNTYVARS1930)\n```\n:::\n\n\n\n## Spaces\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# strive for\n(15 - 5)^2\nmean(county_vars_1930$total_pop)\n\n# avoid\n(15-5)^ 2\nmean (county_vars_1930$total_pop)\n```\n:::\n\n\n## Pipes\n\n## ggplot\n\n## Exercise One\nRestyle the following code chunks and label what each line is doing, using \"#\". \n\n::: {.cell}\n\n```{.r .cell-code}\ncounty_vars_1930|>filter(state %in%c(\"Massachusetts\", \"Tennessee\", \"Washington\", \"New Mexico\"))|>group_by(state)|> summarize(n=n(), mean_pop =mean(total_pop,na.rm =TRUE), mean_rural_farm_pop=mean(rural_farm_pop,na.rm=TRUE))|>filter(mean_rural_farm_pop>=6000)\n\ncounty_vars_1930|>filter(county %in%c(\"Washington\",\"Jefferson\",\"Franklin\"),total_pop >=4000)|>group_by(county)|>summarise(n_states=n())\n```\n:::\n\n\n\n## Data Tidying\n\n\n## Exercise Two\nDescribe what makes the `county_vars_1930` dataset tidy. Provide examples of the following using the dataset. \n\n- variables: \n- observations:\n- values: \n\n## Lengthening Data {.smaller}\nHow do we get from the `state_vars_1930` dataframe to Table one in Dr. Harrison's manuscript?\n\n![](images/Table_one_REA.png)\n\n## Lengthening Data\n\n- In pairs, brainstorm the general process you might need to take to get from the `state_vars_1930` dataframe to table one on whiteboards. \n- hints:\n  - You may need to calculate the total rural population (population that is non-urban)\n  - You'll likely need to reshape your data\n  - We haven't learned all of the functions necessary to fully create the table, so we can strategize together on how to calculate percentage of class\n\n## Lengthening Data\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|3|4|5|6|7|10|11|12\"}\ndenom <- data.frame(denom = c(NA, 3170276, 3170276, 2360429, 3170276, 3170276))\n\nstate_vars_1930 %>% \n  filter(state == \"North Carolina\") %>%\n  mutate(rural_pop = total_pop - urban_pop) %>% \n  select(state, total_pop, urban_pop, rural_pop, rural_farm_pop, black_pop, white_pop) %>% \n  pivot_longer(cols = c(total_pop:white_pop), \n               names_to = \"name\", \n               values_to = \"count\") %>% \n  bind_cols(denom) %>% \n  mutate(perc_class = round(((count/denom)*100),1)) %>%\n  select(name, count, perc_class)\n```\n:::\n\n\n## Exercise Three\n1. Make the table pretty using the `gt` package. \n2. Create the second half of the table using the `county_vars_1930` dataframe for Edgecombe County, NC\n\n## Widening Data\n\n\n## Lengthening Data {.smaller}\nHow do we get from the `state_vars_1930` dataframe to Table two in Dr. Harrison's manuscript?\n\n![](images/Table_two_REA.png)\n\n## Widening data\n\n- In pairs, brainstorm the general process you might need to take to get from the `state_vars_1930` dataframe to table 2 on whiteboards. \n- hints:\n  - You may need to calculate % of total farms, acres per capita, and the average land and building value by race \n  - You'll likely need to reshape the data \n  - We haven't learned all of the functions necessary to fully create the table, so we can strategize together on how to calculate percentage of class\n\n\n## Combining Functions\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3|9|12|15|18\"}\nstate_vars_1930 %>%\n  filter(state == \"North Carolina\") %>%\n  mutate(black_perc_total_farms = (black_num_farms/(black_num_farms + white_num_farms)), \n         white_perc_total_farms = (white_num_farms/(black_num_farms + white_num_farms)), \n         black_acres_per_cap = black_acres/black_num_farms, \n         white_acres_per_cap = white_acres/white_num_farms,, \n         black_avg_val = black_farm_val/black_num_farms, \n         white_avg_val = white_farm_val/white_num_farms) %>% \n  select(state, black_num_farms, white_num_farms, black_perc_total_farms,\n         white_perc_total_farms, black_farm_val, white_farm_val, black_acres_per_cap,\n         white_acres_per_cap, black_avg_val, white_avg_val) %>% \n  pivot_longer(cols = starts_with(c(\"black\", \"white\")),\n               names_to = \"name\", \n               values_to = \"value\") %>% \n  separate(name, \n           into = c(\"race\", \"name\"),\n           sep = \"_\", extra = \"merge\") %>%\n  pivot_wider(names_from = race,\n              values_from = value)\n```\n:::\n\n\n## Exercise four\n1. Make the table pretty using the `gt` package. \n2. Create the second half of the table using the `county_vars_1930` dataframe for Edgecombe County, NC\n\n## Rural Electrification Surveys\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_edgecombe <- read_excel(\"~/Documents/GitHub/ES-202/hw/case_studies/week-04-REA/data/survey_edgecombe.xlsx\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}