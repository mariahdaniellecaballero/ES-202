---
title: "[Assess] Global Stocktake Case Study"
subtitle: "üìç Sharm el Sheikh, Egypt"
date: "October 10, 2025"
format: 
  revealjs:
    theme:
      - default
    css: custom.scss
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    center: true
execute:
  freeze: auto
---
# Class Overview 
- Centering activity
- Setting the stage
- Paired coding

## Centering Activity
- Clara :-)

## Setting the Stage
- This week's focus is on formatting plots and Exploratory Data Analysis!
- Using delegate data for COP1-COP29 (1995 to 2024)

## Learning Outcomes
- Apply thematic components to ggplot figures 
- Conduct Exploratory Data Analysis (EDA)
- Understand data visualization options for different data relationships
- Connect findings to theoretical understandings of cosmopolitan justice

## Let's get Started
- Find your pair
- Open Posit

## Loading packages {.smaller}
- We'll need to install three new packages
  - Run lines 1-3 in you *console* without the "#"
  - Paste lines 4-8 in your *analysis.qmd* file
  - Sometimes we might want to use packages currently under development, in which case we can use the `install_github()` function to install the `ggthemr` package.
```{r}
#| warning: false
#| message: false
#| echo: true

# install.packages("scales")
# install.packages("RColorBrewer")
# install.packages("devtools")
library(readr)
library(tidyverse)
library(scales)
library(RColorBrewer)
library(devtools)

# devtools::install_github('Mikata-Project/ggthemr')
library(ggthemr)
```

## Loading data
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false

cop_delegates <- read_csv("data/cop_delegates.csv")
```

```{r}
# | eval: true
# | echo: false
cop_delegates <- read_csv("~/Library/CloudStorage/GoogleDrive-mc152@wellesley.edu/My Drive/Teaching/ES-202/Case Study Code/data/week_06/cop_delegates.csv")
```

## Take a look at data 
- There are 367,747 delegates in this dataset spanning from COP1 to COP29. 
- There are 21 variables: 
  - What information do we know about each delegate? 
  - Which variables are relevant for thinking about cosmopolitan justice and COP negotiations? 

## Subsetting the Data
- Let's filter only for those involved in negotiations. 
  - This brings our df down to a meager 197,621 people over 30 years. 
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true
parties <- cop_delegates |>
  filter(Group_Type == "Parties")
```

## Applying Thematic Components to Plots
- We learned about geoms, aestheic mappings, plot statistics, positions, and facets last week! 
  - Let's talk scales and themes this week. 

## Scales {.smaller}
- Scales are used to customize your aesthetic mappings. We most frequently will use scales to:
  - change axis ticks 
  - add color palettes to your plots
- Perhaps we were interested in how the number of party delegates has changed over time for AOSIS and non-AOSIS countries. 
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

annual_parties <- parties |>
  group_by(Year, AOSIS) |>
  count()
```

## Scales(cont.) {.smaller}
- Let's start with a basic line graph. 
  - How are the axes looking? 
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true 

annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS))
```

## Scales (Axes ticks/labels) {.smaller}
- `scale_x_continuous()` allows you to change your x axis visuals. In this case, let's change the ticks, or "breaks". `seq()` creates a sequence of breaks if you provide it a start (1995), a finish (2025), and a pattern (by = 5). 
- `scale_y_continuous()` allows you to change your y axis visuals. Let's just add a comma to our delegate count `labels` using the `lable_comma()` function, so it's more clear to folks. 
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| code-line-numbers: "|4|5"
annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS)) +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(labels = label_comma())
```

## Axes scale outcome {.smaller}
Ah, much better! 
```{r}
#| warning: false
#| message: false
#| echo: false
#| eval: true
annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS)) +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(labels = label_comma())
```

## Scales (colors) {.smaller}
- `scale_color_manual()` allows us to define a custom color palette for categorical variables. 
  - values can be color names (red/blue) or hex codes, which you can find on websites like [coolors.co](#C3423F/#5BC0EB)!
  - `name` will change the title of your legend
  - `labels` will change the labels associated with your colors
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| code-line-numbers: "|6|7|8"
annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS)) +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(labels = label_comma()) +
  scale_color_manual(
    values = c("lightblue", "gray50"),
    name = "Coalition", labels = c("AOSIS", "Non-AOSIS")
  )
```

## Color scales outcome {.smaller}
Looking good! 
```{r}
#| warning: false
#| message: false
#| echo: false
#| eval: true
annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS)) +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(labels = label_comma()) +
  scale_color_manual(
    values = c("lightblue", "gray"),
    name = "Coalition", labels = c("AOSIS", "Non-AOSIS")
  )
```

## Lastly, Themes! {.smaller}
- Themes control the non-data related aspects of a plot, such as labels, plot background, and legend position. 
  - `labs()` allows us to fix our y axis label. 
  - `theme_minimal()` changes the background of the plot (there are eight themes, see [here](https://ggplot2.tidyverse.org/reference/ggtheme.html) for more options!)
  - `legend.position` allows us to move the legend from the right side to another position.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| code-line-numbers: "|10|11|12"
annual_parties |>
  ggplot() +
  geom_line(aes(x = Year, y = n, color = AOSIS)) +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(labels = label_comma()) +
  scale_color_manual(
    values = c("lightblue", "gray70"),
    name = "Party Coalition", labels = c("AOSIS", "Non-AOSIS")
  ) +
  labs(y = "Number of Delegates") +
  theme_minimal() +
  theme(legend.position = "bottom")

```

## EX_01 {.smaller}
Create a line chart for the percent of female negotiators between 1995 and 2024 for AOSIS and Non-AOSIS countries. Make sure to:

 - change the y scale to reflect a percentage
  - hint: you can use `?label_percent()` for help
 - change your colors using the `scale_color_manual()` function
 - Change your y axis label
 - apply a different theme for your plot 
 - and place the legend on top of your plot. 

I've provided the code for calculating a summary dataframe to get you started!

## Exploratory Data Analysis {.smaller}
- EDA is a process meant to better understand the kinds of variation in your data, and the type of covariation between variables that might be present. 
- EDA has no rules! The goal is to generate questions and explore your data to decide which graphs, models, or transformations to make. 
- There are lots of ways to explore your data, but let's learn three ways based on our variable types
  - one continuous 
  - one categorical and one continuous
  - two categorical

## One Continuous Variable {.smaller}
- Let's create a subset of our data for COP27 delegates, and count the number of delegates per country. 
- `geom_histogram()` gives us a great look at variation in a variable.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false
cop_27 <- parties |>
  filter(Year == 2022) |>
  count(AOSIS, Delegation)

# plot
cop_27 |>
  ggplot() +
  geom_histogram(aes(x = n))

```

## Histogram {.smaller}
- Any important variation among delegate counts?
```{r}
#| echo: false
#| eval: true
cop_27 <- parties |>
  filter(Year == 2022) |>
  count(AOSIS, Delegation)

# plot
cop_27 |>
  ggplot() +
  geom_histogram(aes(x = n))
```

## Histogram (bindwidth){.smaller}
- We can also filter our dataset to look closer at the variation among smaller parties (n <100). 
- changing our `binwidth` allows us to see patterns among the majority of the data. 
```{r}
#| echo: true
#| eval: true

cop_27 |>
  filter(n < 100) |>
  ggplot() +
  geom_histogram(aes(x = n), binwidth = 5)
```

## Categorical and Continuous {.smaller}
- Perhaps we wanted to understand the variation in party size between AOSIS and Non-AOSIS countries. 
- A boxplot is a great way to visualize continuous data with a categorical grouping! 
```{r}
#| echo: true
#| eval: true
delegate_size <- parties |>
  group_by(AOSIS, Delegation, Year) |>
  tally()

delegate_size |>
  ggplot() +
  geom_boxplot(aes(x = AOSIS, y = n))
```

## Two Categorical Variables {.smaller}
- We can even do a quick exploration of the relationship between two categorical variables. 
- Suppose we were interested in the gender balance among AOSIS delegates
  - we can use the `geom_count()` function to visualize the pattern between `Female` and `Delegation`
   - note that "female" is a 1,0, so we need to change the data type from continuous to categorical using the `factor` function.
```{r}
#| echo: true
#| eval: false
cop_27_aosis <- parties |>
  filter(Year == 2022 & AOSIS == "AOSIS")

cop_27_aosis |>
  ggplot() +
  geom_count(aes(x = factor(Female), y = Delegation))

```

## geom_count(){.smaller}
```{r}
#| echo: false
#| eval: true
cop_27_aosis <- parties |>
  filter(Year == 2022 & AOSIS == "AOSIS")

cop_27_aosis |>
  ggplot() +
  geom_count(aes(x = factor(Female), y = Delegation))
```

## EX_02
1. Using the `delegate_size` dataframe, filter out the outlying delegate numbers (i.e., n <1000) and visualize the variation in party size between AOSIS and Non-AOSIS countries using a boxplot. 

2. Using the results from the previous question, what sort of variation do you see in delegation size between AOSIS and non-AOSIS countries? 
  - Here's a [quick explanation](https://www.simplypsychology.org/boxplots.html) of boxplots in case it's been awhile. :-) 


## Data Visualization Options
Now that we know how to format figures and explore variation in our data, we can think about how we might want to use our data to tell a story. 

Here are some great resources that I use often for inspiration. 

## From Data to Viz {.smaller}
- [This is a great visual](https://drive.google.com/drive/folders/1aA_tWldPtM-wmbZvVYsOIF14Iec4bZmA?usp=drive_link) I often use when I'm thinking about the kinds of variables I have (or could create). 
![alt](images/poster-big.png)

## Example Workflow 
- Say I'm interested in the number of delegates from universities or colleges in COP attendance, and their affiliated country, between 1995 and 2024. 
- If I filter the data and create a summarized dataframe, I'll have: 
  - one categorical and several numeric variables, one of which is ordered (aka, year). 
  - I think a grouped line plot could be good here. 

## Summarizing my data {.smaller}
```{r}
#| echo: true
#| eval: true
higher_ed <- cop_delegates |>
  filter(str_detect(Affiliation, "University") | 
           str_detect(Affiliation, "College")) |> 
  group_by(Year, AOSIS) |>
  count()
```

## R Graph Gallery {.smaller}
- Once I choose a visual I'm interested in, I often use the website [r-graph-gallery.com](https://r-graph-gallery.com/) to find base code for kind of visual I'm interested in creating. 
- I'll select the "line graph" icon and find example code that creates a graphic I like. 
- Lastly, I can set a theme using the `ggethemr` package, let's use one called "light". 
  - You can see more palette options, [here](https://github.com/Mikata-Project/ggthemr)!
```{r}
#| echo: true
#| eval: false
ggthemr("solarized")

higher_ed %>%
  ggplot() +
    geom_line(aes(x=Year, y=n, group=AOSIS, color=AOSIS))
```

## Not bad! {.smaller}
```{r}
#| echo: false
#| eval: true

library(ggthemr)
ggthemr("solarized")

higher_ed %>%
  ggplot() +
    geom_line(aes(x=Year, y=n, group=AOSIS, color=AOSIS))
```


## GGplot2 Cheatsheet {.smaller}
- Lastly, once I have the base plot that I like, I'll use the [ggplot2 cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html) to change small things that require code I haven't committed to memory, like axes labels, themes, etc. 

## Ta da! {.smaller}
```{r}
#| echo: true
#| eval: true
higher_ed |>
  ggplot() +
  geom_line(aes(x = Year, y = n, group = AOSIS, color = AOSIS),
    linewidth = 1.5
  ) +
  labs(y = "Number of Higher Ed Delegates") +
  scale_x_continuous(breaks = seq(1995, 2025, by = 5)) +
  scale_y_continuous(
    breaks = seq(0, 3000, by = 500),
    labels = label_comma()
  ) +
  theme(legend.position = "bottom")
```

## EX_03 + EX_04: 
  - See Posit! 

## Logistics 
- No class Tuesday, Happy Fall Break! 
- Dr. Caballero to lead centering on Friday
- Logic model discussion next Friday