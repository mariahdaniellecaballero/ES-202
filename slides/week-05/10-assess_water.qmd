---
title: "[Assess] Coastal Livelihoods Case Study"
subtitle: "üìç Isle de Jean Charles"
date: "October 03, 2025"
format: 
  revealjs:
    theme:
      - default
    css: custom.scss
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
    center: true
execute:
  freeze: auto
---

# Class Overview 
- Centering activity
- Setting the stage
- Paired coding

# Centering Activity
- Dr. Caballero
- Ross Gay's reading from [Catalog of Unabashed Gratitude](https://www.youtube.com/watch?v=9aT0A28IW7E), *To the Fig Tree on 9th and Christian*

# Setting the Stage
- This week's focus is on plotting data!
- Using archived data from federal organizations such as: 
  - Federal Emergency Management Agency (FEMA)
  - Department of Transportation (DOT) 
  - Centers for Disease Control (CDC)
  - National Oceanic and Atmospheric Administration (NOAA) 

## Learning Outcomes

- Explore aesthetic mappings 
- Use different geom functions to visualize variables
- Apply statistical transformations and position adjustments
- Connect findings to theoretical understandings of recognition justice

# Let's get Started
- Find your pair
- Open Posit

## Load packages {.smaller}
- Remember that we only need to install packages once
  - paste the **commented code** into your **console** to install packages you don't yet have. 
  - **include lines 4-7 in your analysis.qmd** document
```{r}
#| warning: false
#| message: false
#| echo: true

# install.packages("mapview")
# install.packages("sf")
# install.packages("webshot2")
library(tidyverse)
library(readxl)
library(mapview)
library(sf)
```

## The Grammar of Graphics
- Any graphic can be built using the same components:
  - data set (what we visualize)
  - coordinate system (where the data should go)
  - geom (how the data should be visualized)

## Today's Recipe
![](images/recipe.png)

## Where we're headed
![](images/jobs.png)

## Load data
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false

LA_tracts <- read_sf("data/LA_tracts/LA_tracts.shp")
```

```{r}
# | eval: true
# | echo: false
LA_tracts <- read_sf("~/Library/CloudStorage/GoogleDrive-mc152@wellesley.edu/My Drive/Teaching/ES-202/Case Study Code/data/week_05/LA_tracts/LA_tracts.shp")
```

## Understanding our data {.smaller}
 - Let's take a look at how this data looks. 
```{r}
#| warning: false
#| message: false
#| echo: true
glimpse(LA_tracts)
```

## Looking at spatial data {.smaller}
- the  `geometry` variable data in our dataframe and the `.shp` file type of data suggests this is spatial data. 
- let's quickly map things, to see what data we have. I'll visualize the `gegrphy` column using the `mapview()` function. 
```{r}
#| warning: false
#| message: false
#| echo: true
LA_tracts |>
  mapview(zcol = "gegrphy")
```

## Tidying our dataframe {.smaller}
- Spatial data usually has *very short* variable names. 
- Let's use the `rename()` function to fix that, and the `st_drop_geometry()` function 
to remove the spatial component of our dataframe. 
- We'll create a new dataframe called `LA`, and remove the old one `LA_tracts` using the `rm()` function.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA <- LA_tracts |>
  rename(
    "geography" = "gegrphy",
    "pct_asthma" = "pct_sth",
    "pct_cancer" = "pct_cnc",
    "pct_200_fpl" = "pc_200_",
    "transp_burd" = "trnsp_b",
    "transp_burd_cat" = "trnsp__",
    "ann_cf_cat" = "cf_nn__"
  ) |>
   mutate(geography = factor(geography, levels = c("Isle de Jean Charles", "Terrebonne", "LA"))) |>
  st_drop_geometry()

rm(LA_tracts)  
```

## Aesthetic Mappings (color) {.smaller}
- Aesthetic mappings allow you to choose things like the x and y variables you'd like to visualize, and the colors, shapes, and outlines you'd like to visualize. 
  - Suppose we wanted to visualize the relationship between `pct_cancer` and `pct_asthma`, by `geography`. 
  - we use a `geom_point()` geom to visualize the relationship, define our x and y axes, and define `color` to show the `geography` group. 

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
ggplot() +
  geom_point(aes(x = pct_cancer, y = pct_asthma, color = geography))
```

## Aesthetic Mappings (shape) {.smaller}
- We can run the same lines of code and change the mapping value from `color` to `shape`. 
- This admittedly makes a very bad plot.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
ggplot() +
  geom_point(aes(x = pct_cancer, y = pct_asthma, shape = geography))
```

## Aesthetic Mappings (size) {.smaller}
- We can run the same line of code and change the mapping value to `size`.
- This admittedly makes an even worse plot.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
ggplot() +
  geom_point(aes(x = pct_cancer, y = pct_asthma, size = geography))
```

## Aesthetic Mappings (transparency) {.smaller}
- We can run the same line of code and change the mapping value to `alpha`.
- This admittedly makes an equally terrible plot.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
ggplot() +
  geom_point(aes(x = pct_cancer, y = pct_asthma, alpha = geography))
```

## EX_01 {.smaller}
- Using the `LA` dataframe, can you plot the relationship between the percent of families in a tract living 200% below the federal poverty line (`pct_200_fpl`), and the their transportation burden (`transp_burd`)? 
 - use a `geom_point()` function
 - choose an aesthetic to visualize the `geography` variable.
 - What do your graph results suggest? Is there anything you might change about this graphic to make it more accessible to your readers? 

## Geometric Objects {.smaller}
- Geometric objects determine how we will visualize our data. 
  - The previous examples used `geom_point()`. 
  - Let's use `geom_smooth()` to visualize the same relationship between `pct_cancer` and `pct_asthma` from the `LA` dataframe. 
    - Let's just change the geom to `geom_smooth()`, which will fit the relationship of our data using a regression, and return one line representing our trend.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
  ggplot() +
  geom_smooth(aes(x = pct_cancer, y = pct_asthma))
```


## Geometric Objects (adding aesthetics) {.smaller}
- We can also add aesthetics to this code to delineate `geography`. 
 - Let's add `color` and `linetype` as aesthetics. 
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true
LA |>
  ggplot() +
  geom_smooth(aes(x = pct_cancer, y = pct_asthma, color = geography, 
  linetype = geography))
```

## EX_02 {.smaller}
- Using the `LA` dataframe, can you plot the relationship between the percent of families in a tract living 200% below the federal poverty line (`pct_200_fpl`), and their transportation burden (`transp_burd`)? 
 - Use a `geom_smooth()` function
 - Use a `color` and `linewidth` aesthetics to visualize the `geography` variable.
 
- Are there big differences between the trend for Louisiana versus Terrebonne Parish? Does it make sense for these variables to have a strong relationship? 

## Statistical Transformations {.smaller}
- Allows you calculate *new variables to plot without mutating your variable*. 
- For `geom_bar()` function, the default `stat` is count, meaning that if you supply it with an categoric `x` column, it will count number of observations in each category.
  - In this case, we can visualize the number of communities `n` by the number of annual coastal flooding events `ann_sf_cat`.

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |> 
  filter(!is.na(ann_cf_cat)) |> 
  ggplot() + 
  geom_bar(aes(x = ann_cf_cat), stat = "count")
```

## Statistical Transformations (.cont) {.smaller}
- You can also use `identity` to *visualize specific values*. 
  - In this case, we've counted the number of annual coastal flooding events `ann_cf_cat` using the `count()` function, and visualized our count `n` by setting `stat` to `identity`. 
- Ultimately, this creates the same graph as the previous one. :-)
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
  filter(!is.na(ann_cf_cat)) |> 
  count(ann_cf_cat) |>
  ggplot() +
  geom_bar(aes(x = ann_cf_cat, y = n), stat = "identity")
```

## Position Adjustments {.smaller}
- Position adjustments tell data where to go if they might otherwise occupy the same space. 
  - In this case, we can create a bar chart visualizing the number of annual coastal flooding events `ann_cf_cat`, filled with the number of communities in each category of transportation burden `transp_burd_cat`. 
  - The default is `stack`, but you could also try `dodge`!
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true


LA |>
    filter(!is.na(ann_cf_cat), !is.na(transp_burd_cat)) |>
  ggplot() +
  geom_bar(aes(x = ann_cf_cat, fill = transp_burd_cat), position = "stack")
```

## Facets {.smaller}
- Facets are a great way to visualize grouped data that feels cluttered!
- For example, our very first plot can be made clearer just by adding the `facet_wrap()` function, and indicating that we want it to create several plots based on `geography`.
```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: true

LA |>
ggplot() +
  geom_point(aes(x = pct_cancer, y = pct_asthma, color = geography)) + 
facet_wrap(~geography)
```

## EX 03 + 04 {.smaller}
see Posit Assignment! 

## Logistics
- Two pieces for Tuesday's discussion
- Elizabeth leading centering activity :-) 

